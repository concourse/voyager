// Code generated by counterfeiter. DO NOT EDIT.
package voyagerfakes

import (
	"sync"

	"github.com/concourse/voyager"
)

type FakeSource struct {
	AssetStub        func(string) ([]byte, error)
	assetMutex       sync.RWMutex
	assetArgsForCall []struct {
		arg1 string
	}
	assetReturns struct {
		result1 []byte
		result2 error
	}
	assetReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	AssetNamesStub        func() []string
	assetNamesMutex       sync.RWMutex
	assetNamesArgsForCall []struct {
	}
	assetNamesReturns struct {
		result1 []string
	}
	assetNamesReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSource) Asset(arg1 string) ([]byte, error) {
	fake.assetMutex.Lock()
	ret, specificReturn := fake.assetReturnsOnCall[len(fake.assetArgsForCall)]
	fake.assetArgsForCall = append(fake.assetArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Asset", []interface{}{arg1})
	fake.assetMutex.Unlock()
	if fake.AssetStub != nil {
		return fake.AssetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSource) AssetCallCount() int {
	fake.assetMutex.RLock()
	defer fake.assetMutex.RUnlock()
	return len(fake.assetArgsForCall)
}

func (fake *FakeSource) AssetCalls(stub func(string) ([]byte, error)) {
	fake.assetMutex.Lock()
	defer fake.assetMutex.Unlock()
	fake.AssetStub = stub
}

func (fake *FakeSource) AssetArgsForCall(i int) string {
	fake.assetMutex.RLock()
	defer fake.assetMutex.RUnlock()
	argsForCall := fake.assetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSource) AssetReturns(result1 []byte, result2 error) {
	fake.assetMutex.Lock()
	defer fake.assetMutex.Unlock()
	fake.AssetStub = nil
	fake.assetReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSource) AssetReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.assetMutex.Lock()
	defer fake.assetMutex.Unlock()
	fake.AssetStub = nil
	if fake.assetReturnsOnCall == nil {
		fake.assetReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.assetReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSource) AssetNames() []string {
	fake.assetNamesMutex.Lock()
	ret, specificReturn := fake.assetNamesReturnsOnCall[len(fake.assetNamesArgsForCall)]
	fake.assetNamesArgsForCall = append(fake.assetNamesArgsForCall, struct {
	}{})
	fake.recordInvocation("AssetNames", []interface{}{})
	fake.assetNamesMutex.Unlock()
	if fake.AssetNamesStub != nil {
		return fake.AssetNamesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.assetNamesReturns
	return fakeReturns.result1
}

func (fake *FakeSource) AssetNamesCallCount() int {
	fake.assetNamesMutex.RLock()
	defer fake.assetNamesMutex.RUnlock()
	return len(fake.assetNamesArgsForCall)
}

func (fake *FakeSource) AssetNamesCalls(stub func() []string) {
	fake.assetNamesMutex.Lock()
	defer fake.assetNamesMutex.Unlock()
	fake.AssetNamesStub = stub
}

func (fake *FakeSource) AssetNamesReturns(result1 []string) {
	fake.assetNamesMutex.Lock()
	defer fake.assetNamesMutex.Unlock()
	fake.AssetNamesStub = nil
	fake.assetNamesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSource) AssetNamesReturnsOnCall(i int, result1 []string) {
	fake.assetNamesMutex.Lock()
	defer fake.assetNamesMutex.Unlock()
	fake.AssetNamesStub = nil
	if fake.assetNamesReturnsOnCall == nil {
		fake.assetNamesReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.assetNamesReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assetMutex.RLock()
	defer fake.assetMutex.RUnlock()
	fake.assetNamesMutex.RLock()
	defer fake.assetNamesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ voyager.Source = new(FakeSource)
